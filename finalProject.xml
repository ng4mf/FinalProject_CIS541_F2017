<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
clock x;

broadcast chan VPace, VSense;

const int minVRP = 15;
const int maxVRP = 50;</declaration>
	<template>
		<name x="5" y="5">Heart</name>
		<declaration>const int minWait = 100;
const int maxWait = 150;</declaration>
		<location id="id0" x="578" y="178">
			<name x="595" y="152">Idle</name>
			<label kind="invariant" x="595" y="187">x &lt;= maxVRP</label>
		</location>
		<location id="id1" x="86" y="178">
			<name x="35" y="152">Ready</name>
			<label kind="invariant" x="-8" y="187">x &lt;= maxWait</label>
		</location>
		<init ref="id1"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="212" y="255">x &gt;= minVRP</label>
			<label kind="assignment" x="391" y="255">x = 0</label>
			<nail x="510" y="279"/>
			<nail x="162" y="279"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="263" y="42">VPace?</label>
			<label kind="assignment" x="331" y="42">x = 0</label>
			<nail x="162" y="67"/>
			<nail x="502" y="67"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="204" y="153">x &gt;= minWait</label>
			<label kind="synchronisation" x="315" y="153">VSense!</label>
			<label kind="assignment" x="391" y="153">x = 0</label>
		</transition>
	</template>
	<template>
		<name>Ventricle</name>
		<declaration>// all measurements are in seconds * 100

const int LRL = 150;
const int URL = 60;
int[URL, LRL] HRL = URL;

int[URL, LRL] RL;

bool hpenable, hp, started;
</declaration>
		<location id="id2" x="255" y="0">
			<name x="263" y="-34">WaitVRP</name>
			<label kind="invariant" x="263" y="17">x &lt;= maxVRP</label>
		</location>
		<location id="id3" x="-340" y="0">
			<name x="-399" y="-34">WaitRL</name>
			<label kind="invariant" x="-399" y="8">x &lt;= RL</label>
		</location>
		<init ref="id3"/>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="-187" y="59">x &gt;= minVRP</label>
			<label kind="assignment" x="17" y="51">hpenable = hp, 
started=true</label>
			<nail x="204" y="85"/>
			<nail x="-280" y="85"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-178" y="-110">x &gt;= RL</label>
			<label kind="synchronisation" x="-85" y="-110">VPace!</label>
			<label kind="assignment" x="8" y="-110">x = 0, RL = LRL, hp = false</label>
			<nail x="-272" y="-85"/>
			<nail x="204" y="-85"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-85" y="-25">VSense?</label>
			<label kind="assignment" x="17" y="-25">x = 0, RL = HRL, hp = true</label>
		</transition>
	</template>
	<template>
		<name>Observer</name>
		<declaration>int vstarted, tv;</declaration>
		<location id="id4" x="-170" y="-246">
			<name x="-238" y="-280">VSensed</name>
			<committed/>
		</location>
		<location id="id5" x="110" y="-25">
			<name x="127" y="-42">VPaced</name>
			<committed/>
		</location>
		<location id="id6" x="-170" y="-25">
			<name x="-238" y="-34">WaitRL</name>
		</location>
		<init ref="id6"/>
		<transition>
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="assignment" x="-93" y="34">vstarted = 0, tv = 0</label>
			<nail x="-34" y="34"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id6"/>
			<label kind="assignment" x="-102" y="-144">vstarted = 0, tv = 0</label>
			<nail x="-110" y="-127"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-238" y="-144">VSense?</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-51" y="-51">VPace?</label>
		</transition>
	</template>
	<system>// Place template instantiations here.
// Process = Template();
// List one or more processes to be composed into a system.
system Heart, Ventricle, Observer;
    </system>
	<queries>
		<query>
			<formula>A[] ((Ventricle.WaitRL &amp;&amp; Ventricle.started) imply x &gt; Ventricle.VRP)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] (Ventricle.hpenable imply x &lt;= Ventricle.HRL)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] (!Ventricle.hpenable imply x &lt;= Ventricle.LRL)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] not deadlock</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
